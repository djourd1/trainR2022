---
title: Work with rows and columns
linktitle: Work with rows and columns
slug: row-col-tidyverse
type: book
date: "2021-02-02T00:00:00+01:00"

weight: 10
output:
  html_document:
    keep_md: true
---

## Learning objectives

In this chapter, you will learn how to:

+ [Sort rows](#sort-rows)
+ [Select then sort rows](#select-sort-rows)
+ [Select a subset of columns](#subsetting-columns)
+ [Select a subset of rows and columns](#subsetting-rows-and-columns)

For this, you will learn the commands `arrange()` and `select()`of the `dplyr` package. You will also practice the use of the pipes (`%>%`) to chain successive commands. The chaining of commands will allow you to arrange your data in a very transparent and easy way.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(gapminder)
library(tidyverse)
data <- gapminder
data$row_no <- 1:nrow(data)
```

## Sort rows

You are now familiar with `dplyr` commands and the pipe syntax. A second type of manipulation is the ordering of your data. For this, we will use the command `arrange()`.

The command `arrange()` changes the order of the rows. The argument is a set of column names to order by. 

```{r, eval=FALSE}
data %>% arrange(country) 
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% arrange(country) 
```
{{< /spoiler >}}

If you provide more than one column name, the column names are separated with commas. Each additional column will be used to break ties in the values of preceding columns (lexicographic ordering). 

```{r, eval=FALSE}
data %>% arrange(continent, country, year)
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% arrange(continent, country, year)
```
{{< /spoiler >}}


Use `desc()` to re-order by a column in descending order:

```{r, eval=FALSE}
data %>% arrange(desc(continent), country)
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% arrange(desc(continent), country) 
```
{{< /spoiler >}}


## Chaining data manipulation: selecting and sorting rows {#select-sort-rows}

Let's develop a more complex example.

You want to show the countries with the highest 2007 GDP per capita of the African continent, and limit your results to the first six countries. 

For this, you will need to:

+ select countries on the African continent for which we have data in 2007
+ sort the results in descending order of GDP
+ retain only the first six results

This can be done with this chain of commands:

```{r, eval=FALSE}
data %>% 
  filter(continent == "Africa", year ==2007) %>%
  arrange(-gdpPercap) %>%
  slice_head(n=6)
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% 
  filter(continent == "Africa", year ==2007) %>%
  arrange(-gdpPercap) %>%
  slice_head(n=6)
```
{{< /spoiler >}}

{{% callout note%}}
Note that: 
+ each step corresponds to one command (filter, arrange, etc.) and for increased readability we can present each command on a separate line; 
+ the different steps are chained, i.e., the results of the first command are passed as the first argument to the next command;
+ you did not have to create intermediate variables.
{{% /callout %}}

## Select columns/variables {#subsetting-columns}

When you have a large survey with many variables, you may want to work only with the variables needed for your analysis.

The function `select()` will allow you to create a subset of variables.

### Column positions
A first approach is to list the column positions.  

```{r, eval=FALSE}
data %>% select(1, 3, 6) 
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% select(1, 3, 6) 
```
{{< /spoiler >}}

However, this is not really recommended as the order of your columns could change, and lead to unexpected results. So, it is advisable to use column names instead.

### Column names

A second approach is to list all the names of the variables you want to select:
```{r, eval=FALSE}
data %>% select(country, year, gdpPercap)
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% select(country, year, gdpPercap)
```
{{< /spoiler >}}

However, it can become rapidly cumbersome to have to write a long list of variable names. Hopefully, you can use a few tricks.

#### Select ranges of variables
You can provide a range of variables or a range of column positions

```{r, eval=FALSE}
# This will select the variables 
# between the column continent and pop
data %>% select(continent:pop)
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% select(continent:pop)
```
{{< /spoiler >}}


#### Exclude instead of selecting
If you need to select most variables and exclude only a few variables you can use the sign `-` to signal the variables you want to exclude:

```{r, eval=FALSE}
data %>% select(-gdpPercap)
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% select(-gdpPercap)
```
{{< /spoiler >}}


#### Select by type

You can select the variables by their type or any other characteristic using `where()`. 

`where()` applies a function to all variables and selects those for which the function returns TRUE.

```{r, eval=FALSE}
# will select only the numeric variables
data %>% select(where(is.numeric))
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% select(where(is.numeric))
```
{{< /spoiler >}}


#### Use additional helpers on variable names
To make your life easier, you can also use a number of helper function within select

```{r, eval=FALSE}
# Select of the variables with names starting with C
data %>% select(starts_with("c"))
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% select(starts_with("c"))
```
{{< /spoiler >}}



```{r, eval=FALSE}
# Select of the variables with names containing O
data %>% select(contains("O"))
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% select(contains("O"))
```
{{< /spoiler >}}

It was probably not convincing with such an example, but imagine that you have a data set with information collected at different time, and you have variables such as x2000, x2001, x2002, x2003

```{r, eval=FALSE}
# Presented for reference only, 
# We do not have variables x2000, x2001, x2002, x2003!
data %>% select(starts_with("x"))
```

#### Use a combination of these strategies

Note that you can mix the strategies to obtain a list of variables. For example, you want to select the row_no and year variables and the variables containing "O". 

```{r, eval=FALSE}
data %>% select(row_no, year, contains("o"))
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% select(row_no, year, contains("o"))
```
{{< /spoiler >}}


### Reordering columns

Sometimes, you just want to re-order the variables. Indeed you can do this with select, but it can still be cumbersome if you need to move only a few among many columns.

In such case you can use the function `relocate()`. 

The default behavior corresponds to the case where you want to move some variables to the front:

```{r, eval=FALSE}
# this will make the row_no variable as the first colum
data %>% relocate(row_no)
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% relocate(row_no)
```
{{< /spoiler >}}

Use the function helper if you need more sophisticated changes.


## Selecting rows and columns {#subsetting-rows-and-columns}

You have all the tools to select rows and columns. Using tidyverse, you will chain each manipulation. For example, you want to select the column `country` and `pop`, and consider only the African countries:

```{r, eval=FALSE}
data %>% filter(continent == "Africa") %>%
  select(country, pop)
```

{{< spoiler text="Click to see the output" >}}
```{r, echo=FALSE}
data %>% filter(continent == "Africa") %>%
  select(country, pop)
```
{{< /spoiler >}}

Note that the order of the commands can be important. In our example, we selected the row where continent was "Africa" and then selected two variables `country` and `pop`. Imagine what would happen if you interchange the two commands:

```{r, eval=FALSE}
data %>%  select(country, pop) %>%
  filter(continent == "Africa") 
```

## Exercises

### Exercise 1: 

Show the 2007 GDP per capita of the 10 most populated countries (in 2007) in descending order of population

{{% callout solution%}}
{{< spoiler text="Click to view the solution" >}}


```{r}
data %>% filter(year==2007) %>%
  arrange(-pop) %>%
  select(country, pop, gdpPercap) %>%
  slice_head(n=10)
```
{{< /spoiler >}}
{{% /callout %}}

### Exercise 2: 

Show the 2007 life expectancy (in 2007). Order by descending GDP per capita. Show the countries with the 5 highest GDP per capita and the 5 lowest GDP per capita.

{{% callout solution%}}
{{< spoiler text="Click to view the solution" >}}

```{r}
data %>% filter(year==2007) %>%
  arrange(-gdpPercap) %>%
  select(country, lifeExp, gdpPercap) %>%
  slice(1:5, (n()-4):n())  #be careful with the parenthesis
```
{{< /spoiler >}}
{{% /callout %}}

