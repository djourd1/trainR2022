---
title: "Select rows" 
author: Damien Jourdain
date: '2021-11-20'
slug: select-rows-tidyverse
categories:
  - R
tags: []
type: book
weight: 2
output:
  html_document:
    keep_md: true
---

## Learning objectives

Often when you want to understand your data or exclude some individuals that are outside the scope of your analysis, you will need to select subsamples of your data set.

In this chapter, you will learn how to select specific rows of your data frame. This is our first encounter with the package `dplyr` and the use of the pipe for chaining commands. This is an important section, as you will be using this kind of syntax for all the subsequent types of data manipulations.  

At the end of the chapter, you should be able to select specific rows of a data set that will be selected :

+ by their row number
+ a logical criteria based on the different variables describing the rows
+ randomly

First, let's rename the dataframe `gapminder` with a shorter name, and let's add a column `row_no`. That column is not really essential, but it will help visualizing the rows that have been selected.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(gapminder)
library(tidyverse)
```


```{r}
data <- gapminder
data$row_no = 1:nrow(data)
```


We have several ways to subset rows.

## Selecting rows by their position

To do this we will start to use the `dplyr` package. Note that `dplyr` is already loaded if you loaded the package `tidyverse`. 

The command `slice()` lets you index rows by their locations. It allows you to select, remove, and duplicate rows. 

The easiest way to use slice is to indicate the vector of row numbers you wish to keep as in:
```{r}
slice(data, 2:5)  # to select the row from 2 to 5
slice(data, c(7, 5, 1)) # to select specific rows in a specific order
slice(data, 10) #note that including a number and not a vector also works
```

Note that all `dplyr` related commands work in the same way:

+ The first argument is a data frame.
+ The subsequent arguments describe what to do with the data frame, using the variable names (**without quotes**) or sometimes some vectors of numbers.
+ The result is a new data frame.

A very convenient feature of tidyverse is the pipe `%>%` operator. 
To understand how it works, we can reproduce the precedent example using the pipe. 

```{r}
data %>% slice(2:5)
```

How did that work:

You need to read this command from left to right, and think that the results of the previous command are passed as the first argument of the next command. 

The first command is to take the data.frame data, the result data is passed on as the first argument of the command slice(...). So literally, you think about this command as: take "data", then use slice to select the row 2 to 5...

In this very simple command, the advantage of using the pipe is not obvious as you would probably be faster in writing `data[2:5, ]`, but you will soon see its main advantage when we will start "chaining" several commands.

{{% callout note%}}

`n()` is a very useful `dplyr` function that outputs the number of rows of the dataset.
For example, you could use it with `slice` to discard the first 200 rows.

```{r}
slice(data, 200:n()) %>% head(10)
```
(note we have chained the command with head(10) using the pipe)

{{% /callout%}}


Note you can use several variants of `slice()`, in particular, you may want to look at the commands 
`slice_head()` and `slice_tail()` to select the first or last n rows from your data set.

### Exercise 1: Select the last 10 rows

Using the command `slice_tail()`, select the last 10 rows of the dataset data.

{{% callout solution%}}
{{< spoiler text="Click to view the solution" >}}

```{r}
# note that it outputs a new dataframe, however you can check that the initial data 
# was not modified, and that you did not create a new object in the workspace
data %>% slice_tail(n=10)  

# if you want to save it with a new name
data2 <- data %>% slice_tail(n=10)  
``` 

{{% callout warning%}}
You may want to overwrite the old data
```{r, eval=FALSE}
data <- data %>% slice_tail(n=10)  
```
However, by doing so you deleted the old dataset!
Make sure this is what you wanted to do...

{{% /callout%}}

{{< /spoiler >}}
{{% /callout %}}

### Exercise 2: Select the rows 3, 50 and 200

Using a command to select the 3, 50 and 200 of the dataset `data`.

{{% callout solution%}}
{{< spoiler text="Click to view the solution" >}}

```{r}
data %>% slice(c(3,50, 200))
```
{{< /spoiler >}}
{{% /callout %}}


## Randomly selecting rows

A more interesting application is the creation of a random subsample of cases (i.e., rows).
Again, you can use a slice helper: `slice_sample()` which allows you to random select with or without replacement.

```{r}
set.seed(12345)
data %>% slice_sample(n = 5)
data %>% slice_sample(n = 5, replace = TRUE)
```

{{% callout note %}} 
{{< spoiler text="A note on the use of seeds" >}}
You probably noticed that the random samples you obtained are different from this example, and are different each time you run the commands. This is what randomness is about. However, sometimes you want to make sure you can retrieve the exact same random sample to make the output of your R code reproducible. 

For this, you can use a random **seed**. A seed is a number that initializes a pseudorandom number generator. The random numbers that your computer generates are in fact *pseudorandom* numbers that aim to simulate randomness. By setting a specific seed, the random processes in our script always start at the same point and hence lead to the same result.

First, let’s generate some random numbers using the `sample()` function:
```{r}
sample(1:200, 5)  # sample out 5 numbers from the vector 1:200
```

Let's execute exactly the same R code again:

```{r}
sample(1:200, 5)  # sample out 5 numbers from the vector 1:200
```
The results should be different

Second, let's set a seed before the command and see what happens:
```{r}
set.seed(12345)
sample(1:200, 5)  # sample out 5 numbers from the vector 1:200
```

Let’s do this again with the same seed as before:
```{r}
set.seed(12345)
sample(1:200, 5)  # sample out 5 numbers from the vector 1:200
```

The output is exactly the same for the two experiences, and they should also be the same than the one on your computer.
{{< /spoiler>}}
{{% /callout %}}


### Exercise 3

1. Generate a subset of data with its first 10 rows and name it data10
2. Generate a random subsample of `data10` containing 20 rows. (tip: understand what the argument replace is doing)

{{< spoiler text="Click to see the solution" >}} 
```{r}
data10 <- data %>% slice_head(n=10)
```

Random sample with replacement. Note that it you do not include `replace=TRUE` argument, R will throw an error (why?)

```{r}
data10 %>% slice_sample(n = 20, replace = TRUE)
```
{{< /spoiler >}}

## Selecting rows based on a logical criterion

Let say you want to look only at South Africa data. 

We will now use another command from the dplyr package : `filter()`

```{r}
SAdat <- filter(data, country=="South Africa")
head(SAdat)  #the function head selects the first 6 rows of a data frame
```

Note again how the command worked :

+ The first argument is a data frame.
+ The subsequent arguments describe what to do with the data frame, using the variable names *without quotes*.
+ The result is a new data frame.

You can create a more complicated criteria using functions and operators such as

+ `==`, `>`, `>=`,  `<`, `<=`  (when constructing comparison expressions)
+ `%in%` when checking presence in a list of possible value
+ `&` (and), `|` (or), `!`  (not) (when combining expression)

In the following example, we are selecting South Africa records for years after 2000:

```{r}
SA2000 <- filter(data, country=="South Africa" & year > 2000)
head(SA2000,3)
```

### Exercise 4: Select recent African data

+ Select records from African country with a population greater than 30 million for years after 2003 (note there are three selection criteria)

{{< spoiler text="Click to see the solution" >}} 
```{r}
filter(data, continent=="Africa" , year > 2003, pop > 30000000)
```
{{< /spoiler >}}

### Exercise 5: Select the data that from South Africa except those from 1962, 1977 and 2003

{{< spoiler text="Click to see the solution" >}} 
```{r}
filter(data, country=="South Africa" & !(year %in% c(1962, 1977, 2003)))
```
{{< /spoiler >}}

## Advanced sampling

We will now play again with the gapminder data. 

Let's first select a sub-sample of information about the countries from the gapminder data set.
We want to select only two years (2002 and 2007), and we want to select randomly ten countries.

A first idea would be to use the command `slice_sample()`, as in:

```{r}
set.seed(123)
data <- gapminder %>% 
  filter(year > 2000 ) %>%
  slice_sample(n=10) %>% arrange(country)
data
```

The problem with this approach, is that each country having two records, doing a "blind" sampling of rows, will lead to situations where we have only one record about a country. This is what happened here.

What we really want is a subsample of countries, and once a country is selected, we want to see all the records of that selected country. To do this, we need a different approach and use the base command `sample()`:

```{r}
# using tidyverse approach:
random_names <- gapminder %>% 
  select(country) %>%  
  unique() %>%      # take only one record per country
  as_vector() %>%   # as_vector transforms a data.frame into a vector
  sample(10, replace = FALSE)   # take a 10 random sample 

# sometimes tidyverse can be long
# it might be easier to use the following command:
set.seed(123)
random_names <- sample(unique(data$country), 10, replace=FALSE)
random_names
```

Now, we can use this vector of country names to select the corresponding countries

```{r}
data <- gapminder %>% filter(year > 2000 ) %>%
  filter(country %in% random_names) %>%   
  arrange(country)
data
```



