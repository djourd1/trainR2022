---
title: "Select rows" 
author: Damien Jourdain
date: '2021-11-20'
slug: select-rows-tidyverse
categories:
  - R
tags: []
type: book
weight: 2
output:
  html_document:
    keep_md: true
---

## Learning objectives

If you want exclude some individuals that are outside the scope of your analysis, you need to be able to select subsamples of your data set. In this section, you will learn how to select specific rows of your data set. This is our first encounter with the package `dplyr` and the use of pipes (`%>%`) for chaining commands. **This is an important section**, as you will use this syntax for all types of data manipulation that follow.  

At the end of this section, you should be able to select specific rows of a data set :

+ [using their row number](#select-rows-position)
+ [using a logical criteria based on the different variables describing the rows](#random-rows)
+ [randomly](#logical-criteria)

## Data set up

First, let's rename the dataframe `gapminder` with a shorter name, and let's add a column `row_no` using the data.frame commands. That column is not really essential, but it will help visualizing the rows that have been selected.

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(gapminder)

data <- gapminder
data$row_no = 1:nrow(data)
```

## Selecting rows by their position {#select-rows-position}

To do this we will start to use the `dplyr` package. Note that `dplyr` was loaded when you loaded the package `tidyverse`, so you do not need an additional command. 

### The command slice()

The command `slice()` lets you index rows by their positions. It allows you to select, remove, and duplicate rows. 

The easiest way to use slice is to indicate the vector of row numbers you wish to keep as in:

```{r, eval=FALSE}
slice(data, 2:5)  # to select the row from 2 to 5
slice(data, c(7, 5, 1)) # to select specific rows in a specific order
slice(data, 10) #note that including a numeric and not a vector also works
```

{{< spoiler text="Click to view the results" >}}
```{r, echo=FALSE}
slice(data, 2:5)  # to select the row from 2 to 5
slice(data, c(7, 5, 1)) # to select specific rows in a specific order
slice(data, 10) #note that including a numeric and not a vector also works
```
{{< /spoiler >}}


Note that all `dplyr` related commands work in the same way:

+ The first argument is a data frame.
+ The subsequent arguments describe what to do with the data frame, using the variable names **without quotes** or sometimes some vectors of numbers.
+ The result is a new data frame.

<div data-datacamp-exercise data-lang="r">
	<code data-type="pre-exercise-code">
		# This will get executed each time the exercise gets initialized
		b = 6
	</code>
	<code data-type="sample-code">
		# Create a variable a, equal to 5


		# Print out a


	</code>
	<code data-type="solution">
		# Create a variable a, equal to 5
		a <- 5

		# Print out a
		print(a)
	</code>
	<code data-type="sct">
		test_object("a")
		test_function("print")
		success_msg("Great job!")
	</code>
	<div data-type="hint">Use the assignment operator (<code><-</code>) to create the variable <code>a</code>.</div>
</div>




### Using the `%>%` (pipe) operator

A very convenient feature of tidyverse is the `%>%` operator. 
To understand how it works, we can reproduce the precedent example using it. 

```{r, eval=FALSE}
data %>% slice(2:5)
```

{{< spoiler text="Click to view the results" >}}
```{r, echo=FALSE}
data %>% slice(2:5)
```
{{< /spoiler >}}


How did that work:

You need to read this command from left to right, and think that the results of the previous command are passed as the first argument of the next command. 

The first command is to take the data.frame data, the result data is passed on as the first argument of the command slice(...). So literally, you think about this command as: take "data", then use slice to select the row 2 to 5...

In this very simple command, the advantage of using the pipe is not obvious as you would probably be faster in writing `data[2:5, ]`, but you will soon see its main advantage when we will start "chaining" several commands.

{{% callout note%}}

`n()` is a very useful `dplyr` function that outputs the number of rows of the dataset.
For example, you could use it with `slice` to discard the first 200 rows.

```{r}
slice(data, 200:n()) %>% head(10)
```
(note: we have chained the command with head(10) using the pipe to display only the first ten rows of the new data set)

{{% /callout%}}

### slice helpers

Note you can use several variants of `slice()` for specific uses - we will sometimes call them helpers. In particular, you may want to look at the commands `slice_head()` and `slice_tail()` to select the first or last $n$ rows of your data set.

### Exercise 1: Select the last 10 rows

Using the command `slice_tail()`, select the last 10 rows of the dataset data.

{{% callout solution%}}
{{< spoiler text="Click to view the solution" >}}

```{r}
# note that it outputs a new dataframe, however you can check that the initial data 
# was not modified, and that you did not create a new object in the workspace
data %>% slice_tail(n=10)  

# if you want to save it with a new name
data2 <- data %>% slice_tail(n=10)  
``` 

{{% callout warning%}}

You may want to overwrite the old data
```{r, eval=FALSE}
data <- data %>% slice_tail(n=10)  
```
However, by doing so you deleted the old dataset!
Make sure this is what you wanted to do...

{{% /callout%}}

{{< /spoiler >}}
{{% /callout %}}

### Exercise 2: Select the rows 3, 50 and 200

Using a command to select the 3, 50 and 200 of the dataset `data`.

{{% callout solution%}}
{{< spoiler text="Click to view the solution" >}}

```{r}
data %>% slice(c(3,50, 200))
```
{{< /spoiler >}}
{{% /callout %}}


## Randomly selecting rows{#random-rows}

A more interesting application is the creation of a random subsample of cases (i.e., rows).
Again, you can use a slice helper`slice_sample()` which allows you to random select with or without replacement.

```{r, eval=FALSE}
set.seed(12345)
data %>% slice_sample(n = 5)
data %>% slice_sample(n = 5, replace = TRUE)
```

{{< spoiler text="Click to view the results" >}}
```{r, echo=FALSE}
set.seed(12345)
data %>% slice_sample(n = 5)
data %>% slice_sample(n = 5, replace = TRUE)
```
{{< /spoiler >}}



### Exercise 3

1. Generate a subset of data with its first 10 rows and name it data10
2. Generate a random subsample of `data10` containing 20 rows. (tip: understand what the argument replace is doing)

{{< spoiler text="Click to see the solution" >}} 
```{r}
data10 <- data %>% slice_head(n=10)
```

Random sample with replacement. Note that it you do not include `replace=TRUE` argument, R will throw an error (why?)

```{r}
data10 %>% slice_sample(n = 20, replace = TRUE)
```
{{< /spoiler >}}

## Selecting rows based on logical criteria{#logical-criteria}

Let say you want to look only at South Africa data. 

We will now use another command from the dplyr package : `filter()`

```{r, eval=FALSE}
SAdata <- filter(data, country=="South Africa")
SAdata
```

{{< spoiler text="Click to view the results" >}}
```{r, echo=FALSE}
SAdata <- filter(data, country=="South Africa")
SAdata
```
{{< /spoiler >}}


Note again how the command worked :

+ The first argument is a data frame.
+ The subsequent arguments describe what to do with the data frame, using the variable names *without quotes*.
+ The result is a new data frame that we named `SAdata`

You can create more complicated criteria using functions and operators such as:

+ `==`, `>`, `>=`,  `<`, `<=`  (when constructing comparison expressions)
+ `%in%` when checking presence in a list of possible value
+ `&` (and), `|` (or), `!`  (not) (when combining expression)

In the following example, we are selecting South Africa records for years after 2000:


```{r, eval=FALSE}
SA2000 <- filter(data, country=="South Africa" & year > 2000)
```

{{< spoiler text="Click to see the result" >}} 
```{r, echo=FALSE}
SA2000 <- filter(data, country=="South Africa" & year > 2000)
```
{{< /spoiler >}} 


### Exercise 4: Select recent African data

+ Select records from African country with a population greater than 30 million for years after 2003 (note there are three selection criteria)

{{< spoiler text="Click to see the solution" >}} 
```{r}
filter(data, continent=="Africa" , year > 2003, pop > 30000000)
```
{{< /spoiler >}}

### Exercise 5: Select the data that from South Africa except those from 1962, 1977 and 2003

{{< spoiler text="Click to see the solution" >}} 
```{r}
filter(data, country=="South Africa" & !(year %in% c(1962, 1977, 2003)))
```
{{< /spoiler >}}

## More advanced sampling

We will now use again with the gapminder data. 

Let's first select a sub-sample. We want to select only two years (2002 and 2007), and we want to select randomly ten countries.

A first idea would be to use the command `slice_sample()`, as in:

```{r, eval=FALSE}
set.seed(123)
data <- gapminder %>% 
  filter(year > 2000 ) %>%
  slice_sample(n=10) %>% arrange(country)
data
```

{{< spoiler text="Click to view the results" >}}
```{r, echo=FALSE}
set.seed(123)
data <- gapminder %>% 
  filter(year > 2000 ) %>%
  slice_sample(n=10) %>% arrange(country)
data
```
{{< /spoiler >}}

The problem with this approach is that each country has two records. So with "blind" line sampling, we will encounter cases where we only have one record for a country. That is what happened here, and that is not what we wanted.

What we really want is a subsample of countries, and once a country is selected, we want to see all the records of that selected country. To do this, we need a different approach and use the base command `sample()`:

```{r}
# using tidyverse approach:
random_names <- gapminder %>% 
  select(country) %>%  
  unique() %>%      # take only one record per country
  as_vector() %>%   # as_vector transforms a data.frame into a vector
  sample(10, replace = FALSE)   # take a 10 random sample 

# sometimes tidyverse can be long
# it might be easier to use the following command:
set.seed(123)
random_names <- sample(unique(data$country), 10, replace=FALSE)
random_names
```

Now, we can use this vector of country names to select the corresponding countries

```{r, eval=FALSE}
gapminder %>% filter(country %in% random_names & year > 2000) 
```

{{< spoiler text="Click to view the results" >}}
```{r, echo=FALSE}
gapminder %>% filter(country %in% random_names & year > 2000) %>% arrange(country)
```
{{< /spoiler >}}



