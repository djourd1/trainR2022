---
title: "R Data Frames"
author: "Damien Jourdain"
date: '2020-08-20'
slug: r-data-frames
categories: R
tags: []
type: book
weight: 60
output:
  html_document:
    keep_md: true

---

## Learning objectives

`data.frame` objects allow to store data of *different basic types* into a single tabular structure. I will use the "Data frame" spelling.
 
Data frames are very handy to work with survey data since they are usually stored in tabular form, with many columns corresponding to the responses to the survey and many rows (usually, but not always, one row corresponding to one survey). 

In this section, you will learn:

+ [What is a data frame](#what-is-a-data-frame)
+ [How to create a data.frame object](#create-a-data-frame)
+ [How to access the data](#how-to-retrieve-the-data)
+ [How to sort the data](#how-to-sort-a-data-frame)
+ [How to quickly summarize the data](#quick-summary)
+ [Other classes of data frames](#other-classes-of-data-frames)
  + [Tibbles](#tibbles)
  + [data.table](#datatable)
  
## What is a data frame? 

A data frame is a *table* or a *two-dimensional array-like structure* in which each column contains values of one variable and each row contains one set of values from each column.

Following are the characteristics of a data frame.

+    The column names should be non-empty;
+    The row names should be unique;
+    The data stored in a data frame can be of numeric, factor or character type;
+    Each column should contain same number of data items.

> Data frames are particularly useful because we can combine different types into one single object and are easier to handle than lists.  

We can use built-in dataframes in R to understand this. For example, here is a built-in data frame in R, called `mtcars`. You can access it by just simplying typing its name.

```{r}
mtcars   
```

The top line of the table, called the *header*, contains the *column names*. Each horizontal line afterward denotes a *data row*, which begins with the name of the row, and then followed by the actual data. Each data member of a row is called a *cell*. 

You can easily interpret this as a data frame describing cars. Each row corresponds to a unique model of car, each column corresponds to the different characteristics of the cars.

If you want to know the exact structure of the object mtcars, you can use the function `str()`
```{r}
str(mtcars)
```
We are learning that mtcars is an R object of type `data.frame`, that contains 32 observations (i.e. 32 rows) of 11 variables (i.e., 11 columns). Then each column is described (name, type, first values stored).

## Create a Data Frame

Typically, `data.frames` are imported from other programs rather than created from scratch (refer to the Import Data section for details). Nevertheless, it is important to be aware that you can generate a data.frame on your own.

You create a data frame by supplying *name-vector* pairs to the function `data.frame()`:

```{r}
df1 <- data.frame(
   emp_id = c (1:5), 
   emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
   salary = c(623.3, 515.2, 611.0, 729.0, 843.25), 
   start_date = as.Date(c("2012-01-01", "2013-09-23", "2021-11-15", "2014-05-11", "2015-03-27"))
)

str(df1)
```

## How to retrieve the data? 

### Data in a cell

To retrieve data in a cell, you will enter its row and column coordinates in the single square bracket `[ ]` operator. The two coordinates are separated by a comma. In other words, the coordinates begins with row position, then followed by a comma, and ends with the column position. **The order is important**.

Here is the cell value from the first row, second column of mtcars.

```{r}
mtcars[1, 2]
```

Moreover, we can use the row and column names instead of the numeric coordinates.
```{r}
mtcars["Mazda RX4", "cyl"] 
```
{{< spoiler text="A note on row and column names" >}}
{{% callout note %}}
If you do not remember the names of the columns you can use either `names()` or `colnames()`:

```{r}
names(mtcars)
# colnames(mtcars)  #colnames give the same results
```

If you do not remember the names of the rows you can use `rownames()`:
```{r}
rownames(mtcars)
```
{{% /callout %}}
{{< /spoiler>}}

### Data contained in a column

There are several ways to retrieve the data contained into the columns.

First, we can retrieve a single column with the "$" operator:
```{r}
mtcars$hp 
class(mtcars$hp)
```

Note that you need to know the name of the column you want to retrieve. However, if using R Studio, if you once you have typed mtcars$ a list of possible names will be suggested to you. (yet another good reason to use R Studio instead of R)

Second, we can retrieve the same column with the single square bracket "[]" operator. To do this, we have to prepend the column name (or column number) with a comma character, which signals that we want to take consider all the rows:

```{r}
mtcars[,"hp"] 
```

Alternatively, we can use the column number. 

```{r}
mtcars[,4] 
```

However, it is often clearer to use the column name than the column number. Besides, if you change the structure of the data frame, the ordering of the columns may change, and you may unknowingly refer to a different number if you use column numbers.

{{% callout note %}}
In both cases: 

  + the object `mtcars$hp` or `mtcars[,4] ` is a vector containing 32 numbers (i.e., the number of rows).
+ the order of the entries in the `mtcars$hp` vector preserves the order of the rows in our data frame. This is important as this allows us to manipulate one variable based on the results of another.
{{% /callout %}}


### Data contained in several columns

This use of brackets is becoming especially useful when you want to retrieve several columns. Try this command:

```{r}
carsub <- mtcars[,2:4]
head(carsub)  # the function head() displays the first six rows of the table
```

This example shows that you can extract the columns 2, 3 and 4 of the table `mtcars` and store them in a new data.frame called `carsub`. 

If you want to show several columns that are not in the same sequence of numbers, you can use the function `c()`. 

For example, if you want to select the columns 3,7 and 11:

```{r}
carsub <- mtcars[,c(3,7,11)]
head(carsub)
```

Again, you can use a vector of column names instead of column numbers:

```{r, eval=FALSE}
carsub <- mtcars[ ,c("disp", "qsec","carb")]
```


### Data contained in the rows

We retrieve rows from a data frame with the single square bracket operator, just like what we did with columns. However, in additional to an index vector of row positions, we append an extra comma character. This is important, as the extra comma signals a wildcard match for the second coordinate for column positions. 

To extract rows from a data frame, we use the single square bracket operator, just as we did with columns. However, instead of just providing a vector of row positions, we add a comma after it. 

```{r}
mtcars[1:2, ] 
```
This comma is crucial because it indicates a wildcard match for the second coordinate for column positions. In other words, the comma tells R to include all columns when sub-setting the data frame. Without the comma, R would interpret the index vector as selecting columns, which is not what you wanted.
To convince yourself, evaluate the following command:
```{r, eval=FALSE}
mtcars[1:2] 
```

You can also select rows that are not part of a sequence:

```{r}
mtcars[c(1,3,10), ] 
```

Once you understand this syntax and what was said in the previous section about selection of columns, you should be able to select different row selections using the `c()` function and either row number or row names.

### Sub-set of rows and columns

```{r}
mtcars[c(1,3,10), c(2, 4:5) ] 
```

### Subset based on logical criteria

When looking to create subsets based on a logical condition, you can use the `subset()` function. 

```{r}
subset(mtcars, hp < 90)
```

Note that: 

+ the first argument you pass to `subset()` is the name of the dataframe you want to subset
+ you shouldn't use quotes around hp
+ you should use the traditional comparators to contrusct your conditions: `==`, `>`, etc. 

## How to sort a data.frame?

To sort a data.frame, use the `order( )` function. By default, sorting is ASCENDING. Prepend the sorting variable by a minus sign to indicate DESCENDING order. 

```{r}
#order the cars using the column mpg (ascending order)
mtcars[order(mtcars$mpg),]
```

```{r}
#sort the cars using two keys
mtcars[order(mtcars$mpg, -mtcars$cyl),]
```

{{% callout note %}}

Note that you need to repeat the mtcars$ part within the order function; not doing so will produce an error, because the order function will expect a variable that does not exist.

```{r, error=TRUE}
mtcars[order(mpg),]
```

{{% /callout %}}

## How to quickly summarize the data {#quick-summary}

The statistical summary and nature of the data can be obtained by applying summary() function.

```{r}
summary(carsub)
```



## Other classes of data frames

### Tibbles

Tibble is a new class of data frames (developed by RStudio). They are also capturing data in tabular forms, and have internal features that make working with some packages a little easier. 

You can work with tibbles by installing the suite of packages `tidyverse` or the specific package `tibble`.

```{r, eval = F}
# install a suite of related packages
install.packages("tidyverse")

# Alternatively, install just tibble:
install.packages("tibble")
```

Then load the package tibble
```{r, warning=FALSE,message=FALSE}
library(tibble)
```


#### Creation

Like data.frame, you can create a new tibble from individual vectors with tibble(). 

However, there are a few differences: 

tibble() will: 

+ keep strings as characters (and not convert them automatically into factors)
+ allows you to refer to variables that you just created
+ automatically recycle inputs of length 1

```{r}
tibble(
  x = 1:5, 
  y = 1,    # this will be automatically transformed into a vector with length 5
  z = x^2 + y,  # it will recognize x and y that were just created
  t = letters[1:5]   # strings will not be converted into factors
)
```

It also checks that columns have the same lengths (except, as seen above for unique values)

```{r, error=TRUE}
tibble(
  x = 1:5, 
  t = letters[1:3]
)
```

#### Display 

With large data frames, it will show only the first 10 rows, and all the columns that fit on screen and in addition to its name, each column reports its type.

```{r}
ans <- tibble(
  x = 1:50, 
  t = letters[1:50],
  x2 = x^2,
  e = sample(letters, 50, replace = TRUE)
)
ans
```


#### Subsetting

Compared to a data.frame, tibbles are more strict: they never do partial matching, and they will generate a warning if the column you are trying to access does not exist.

Compare the two codes

```{r}
df <- data.frame(
  thex = runif(5),
  they = rnorm(5)
)
df$x # Extract by name
df$thex
df[["x"]] 
df[[1]] # Extract by position
```

```{r, error=TRUE}
df <- tibble(
  thex = runif(5),
  they = rnorm(5)
)
df$x # Extract by name 
df[["x"]] 
df[[1]] # Extract by position
```


### data.table

data.table is a package that extends data.frames. Two of its most notable features are speed and cleaner syntax.
I will give much more details about data.table in a separate section.


## Exercises

### Exercise 1: 

1. Create the following vectors corresponding to Name, Age, Height, Weigth and Sex. Make sure Sex is a factor.
```{r, echo=FALSE}
Name <- c("Alex", "Moses", "Stephan", "Zakhele", "Leane", "Lucas", "Nobhule")
Age <- c(25, 31, 23, 52, 76, 49, 26)
Height <- c(177, 163, 190, 179, 163, 183, 164)
Weight <- c(57, 69, 83, 75, 70, 83, 53)
Sex <- as.factor(c("F", "F", "M", "M", "F", "M", "F"))
Age
Height
Weight
Sex
```

2. Using these vectors, create the following data frame. (Be careful the vector Name must be used for the creation of row names)

```{r, echo=FALSE}
df <- data.frame (row.names = Name, Age, Height, Weight, Sex)
df
```

{{< spoiler text="Show the answer" >}}

Question 1:

```{r, echo=TRUE}
Name <- c("Alex", "Moses", "Stephan", "Zakhele", "Leane", "Lucas", "Nobhule")
Age <- c(25, 31, 23, 52, 76, 49, 26)
Height <- c(177, 163, 190, 179, 163, 183, 164)
Weight <- c(57, 69, 83, 75, 70, 83, 53)
Sex <- as.factor(c("F", "F", "M", "M", "F", "M", "F"))
Age
Height
Weight
Sex
```

Question 2:

```{r, echo=TRUE}
df <- data.frame (row.names = Name, Age, Height, Weight, Sex)
df
```

{{< /spoiler >}}


### Exercise 2

Using the dataframe `mtcars`, create a new data frame that: 

+ only includes cars with a horse power (hp) greater or equal to 120 and lower or equal to 200, 
+ only contains the columns `disp`, `drat` and `hp`,
+ is sorted by decreasing `hp`

{{< spoiler text="Show the answer" >}}
```{r}
sub <- subset(mtcars[, c("disp", "drat", "hp")], hp >= 120 & hp <=200)
sub2 <- sub[order(-sub$hp),]
sub2
```
{{< /spoiler >}}

