---
title: "Selecting rows" 
author: Damien Jourdain
date: '2021-11-20'
slug: select-rows
categories:
  - R
tags: []
type: book
weight: 2
output:
  html_document:
    keep_md: true
---

## Objectifs d'apprentissage

Souvent, vous aurez à exclure certains individus qui ne font pas partie du champ de votre analyse ou sélectionner des sous-échantillons de votre jeu de données.

Dans ce chapitre, vous allez apprendre à sélectionner des lignes spécifiques de vos données. 

*C'est notre première rencontre avec le paquet `dplyr` et l'utilisation du "pipe" (`%>%`) pour enchaîner les commandes. C'est une section importante, car vous utiliserez ce type de syntaxe pour tous les types de manipulations de données qui suivront.  *

À la fin du chapitre, vous devriez être capable de sélectionner des lignes spécifiques d'un ensemble de données qui seront sélectionnées :

+ par leurs numéros de ligne
+ par un critère logique 
+ de manière aléatoire

Tout d'abord, renommons le dataframe `gapminder` avec un nom plus court, et ajoutons une colonne `row_no`. Cette colonne n'est pas vraiment essentielle, mais elle aidera à visualiser les lignes qui ont été sélectionnées.


```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(gapminder)
library(tidyverse)
```


```{r}
data <- gapminder
data$row_no = 1:nrow(data)
```


Nous disposons de plusieurs moyens pour extraire des sous-ensembles de lignes.

## Sélectionner les lignes par leur position

Nous allons commencer à utiliser le paquetage `dplyr`. Notez que `dplyr` est déjà chargé si vous avez chargé le paquet `tidyverse`. 

La commande `slice()` vous permet d'indexer les lignes par leur emplacement. Elle vous permet de sélectionner, supprimer et dupliquer des lignes. 

La manière la plus simple d'utiliser slice est d'indiquer le vecteur de numéros de lignes que vous souhaitez conserver comme dans :
```{r}
slice(data, 2:5) # pour sélectionner la ligne de 2 à 5
slice(data, c(7, 5, 1)) # pour sélectionner des lignes spécifiques dans un ordre spécifique
slice(data, 10) # Notez que l'inclusion d'un nombre et non d'un vecteur fonctionne également
slice(data, rep(2, 5)) # Je répète la ligne 2 cinq fois
```

Notez que toutes les commandes liées à `dplyr` fonctionnent de la même manière :

+ Le premier argument est le dataframe.
+ Les arguments suivants décrivent ce qu'il faut faire en utilisant les noms des variables **sans guillemets** ou parfois des vecteurs de nombres.
+ Le résultat est un nouveau dataframe.

Une fonctionnalité très pratique de tidyverse est l'opérateur "pipe" `%>%`. 
Pour comprendre comment il fonctionne, nous pouvons reproduire l'exemple précédent en utilisant le pipe. 

```{r}
data %>% slice(2:5)
```

Comment cela fonctionne?

Vous devez lire cette commande de gauche à droite, et penser que les résultats de la commande précédente sont passés comme premier argument de la commande suivante. 

La première commande consiste à prendre les données du data.frame, les données du résultat sont transmises comme premier argument de la commande slice(...). Donc, littéralement, vous pensez à cette commande comme : prendre "data", puis utiliser slice pour sélectionner la ligne 2 à 5...

Dans cette commande très simple, l'avantage du pipe n'est pas évident car vous seriez probablement plus rapide avec la commande `data[2:5, ]`, mais vous verrez bientôt son principal avantage lorsque nous commencerons à "enchaîner" plusieurs commandes.

{{% callout note%}}

`n()` is a very useful `dplyr` function that outputs the number of rows of the dataset.
For example, you could use it with `slice` to discard the first 200 rows.

```{r}
slice(data, 200:n()) %>% head(10)
```
(note we have chained the command with head(10) using the pipe)

{{% /callout%}}


Note you can use several variants of `slice()`, in particular, you may want to look at the commands 
`slice_head()` and `slice_tail()` to select the first or last n rows from your data set.

### Exercise 1: Select the last 10 rows

Using the command `slice_tail()`, select the last 10 rows of the dataset data.

{{% callout solution%}}
{{< spoiler text="Click to view the solution" >}}

```{r}
# note that it outputs a new dataframe, however you can check that the initial data 
# was not modified, and that you did not create a new object in the workspace
data %>% slice_tail(n=10)  

# if you want to save it with a new name
data2 <- data %>% slice_tail(n=10)  
``` 

{{% callout warning%}}
You may want to overwrite the old data
```{r, eval=FALSE}
data <- data %>% slice_tail(n=10)  
```
However, by doing so you deleted the old dataset!
Make sure this is what you wanted to do...

{{% /callout%}}

{{< /spoiler >}}
{{% /callout %}}

### Exercise 2: Select the rows 3, 50 and 200

Using a command to select the 3, 50 and 200 of the dataset `data`.

{{% callout solution%}}
{{< spoiler text="Click to view the solution" >}}

```{r}
data %>% slice(c(3,50, 200))
```
{{< /spoiler >}}
{{% /callout %}}


## Randomly selecting rows

A more interesting application is the creation of a random subsample of cases (i.e., rows).
Again, you can use a slice helper: `slice_sample()` which allows you to random select with or without replacement.

```{r}
data %>% slice_sample(n = 5)
data %>% slice_sample(n = 5, replace = TRUE)
```

### Exercise 3

1. Generate a subset of data with its first 10 rows and name it data10
2. Generate a random subsample of `data10` containing 20 rows. (tip: understand what the argument replace is doing)

{{< spoiler text="Click to see the solution" >}} 

```{r}
data10 <- data %>% slice_head(n=10)
```

Random sample with replacement. Note that it you do not include `replace=TRUE` argument, R will throw an error (why?)

```{r}
data10 %>% slice_sample(n = 20, replace = TRUE)
```
{{< /spoiler >}}

## Selecting rows based on a logical criterion

Let say you want to look only at South Africa data. 

We will now use another command from the dplyr package : `filter()`

```{r}
SAdat <- filter(data, country=="South Africa")
head(SAdat)  #the function head selects the first 6 rows of a data frame
```

Note again how the command worked :

+ The first argument is a data frame.
+ The subsequent arguments describe what to do with the data frame, using the variable names *without quotes*.
+ The result is a new data frame.

You can create a more complicated criteria using functions and operators such as

+ `==`, `>`, `>=`,  `<`, `<=`  (when constructing comparison expressions)
+ `%in%` when checking presence in a list of possible value
+ `&` (and), `|` (or), `!`  (not) (when combining expression)

In the following example, we are selecting South Africa records for years after 2000:

```{r}
SA2000 <- filter(data, country=="South Africa" & year > 2000)
head(SA2000,3)
```

### Exercise 4: Select recent African data

+ Select records from African country with a population greater than 30 million for years after 2003 (note there are three selection criteria)

{{< spoiler text="Click to see the solution" >}} 
```{r}
filter(data, continent=="Africa" , year > 2003, pop > 30000000)
```

{{< /spoiler >}}

### Exercise 5: Select the data that from South Africa except those from 1962, 1977 and 2003


{{< spoiler text="Click to see the solution" >}} 
```{r}
filter(data, country=="South Africa" & !(year %in% c(1962, 1977, 2003)))
```

{{< /spoiler >}}


